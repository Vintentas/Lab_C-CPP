/*Лабораторная работа STL №2 "Сторинг"
Ситникова В.А.
Задание: Разработать программу, которая должна сделать следующее:
1.	Прочитать содержимое текстового файла. Файл может содержать:
a.Слова – состоят из латинских строчных и заглавных букв, а также цифр, длинна слова должна быть не более 20 символов
b.Знаки препинания – «.», «, » «!» « ? » « : » «; »
c.Пробельные символы – пробел, табуляция, символ новой строки.
2.	Отформатировать текст следующим образом :
a.Не должно быть  пробельных символов отличных от пробела
b.Не должно идти подряд более одного пробела
c.Между словом и знаком препинания не должно быть пробела
d.После знака препинания всегда должен идти пробел
e.Слова длиной более 10 символов заменяются на слово «Vau!!!»
3.	Преобразовать полученный текст в набор строк, каждая из которых содержит целое количество строк(слово должно целиком
находиться в строке) и ее длинна не превышает 40 символов.
Подсказки:
•	Для хранения всего входного текста можно использовать одну строку
•	Можно создать строки содержащие символы принадлежащие какое либо категории, например знаки препинания
•	Для хранения результирующих строк можно использовать vector<string>
СПб, 4.03.2017 */


#include "string"
#include "vector"
#include "iostream"
#include "conio.h"
#include "fstream"   //файловый ввод-вывод
#include <Windows.h>


using namespace std;

void main(void)
{
	char S;	
	string str;		
	ifstream fin("Lab2.cpp");															//открытие файла на чтение		
	vector <string> vect_str;
	int i, kol_char;
	

	cout << "----------------------- original text ----------------------"<<endl<<endl;
	
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);  //консоль -свойства -шрифт -Lucida Console
	while ((S = fin.get()) != EOF)															//цикл чтения из файда по буквам в переменную S
	{
		if ((S >= 'A' && S <= 'z') || (S >= '0' && S <= '9') || S == '\t' || S == '\n' || S == ' '|| S == '.' || S == ',' || S == '!' || S == '?')
		{
			cout << S;
			str += S;
		}
	}
	
	
	cout << endl <<endl << "----------------------- formatted text ----------------------" << endl << endl;
	kol_char = 0;
	for (i=0; i<str.size(); i++)														//Форматирование текста по пункту 2
	{
		if (i > 0)
		{
			// Убираем лишние пробелы
			if ((str[i] == ' ' || str[i] == '\t'|| str[i] == '\n')&& str[i - 1] == ' ')	str.erase(i,1);		
			// Убираем пробелы перед символам
			if ((str[i] == ',' || str[i] == '.' || str[i] == '!' || str[i] == '?' || str[i] == ':' || str[i] == ';') && str[i - 1] == ' ') str.erase(i-1,1);																													
		}
		if (i < str.size())
		{
			// Добавляем пробелы после символов
			if ((str[i] == ',' || str[i] == '.' || str[i] == '!' || str[i] == '?' || str[i] == ':' || str[i] == ';') && str[i + 1] != ' ') str.insert(i+1,1,' ');
			
			//	Заменяем слово из более, чем 10 символов на 'Vau!!!'
			if ((str[i] >= 'A' && str[i] <= 'z')|| (str[i] >= '0' && str[i] <= '9')) kol_char++;
			else kol_char = 0;
			if (kol_char > 10 && (str[i + 1] == ' ' || str[i + 1] == '\t' || str[i + 1] == '\n' || str[i + 1] == '.'))
			{
				i = i+1 - kol_char;
				str.erase(i, kol_char);
				str.insert(i, "Vau!!!");
			}
		}
		// Убираем пробельные символы, отличные от пробела
		if (str[i] == '\n' || str[i] == '\t') str[i] = ' ';								

	}
	cout << str<< endl;   

	cout << endl << "-------------------------------------------------------------" << endl << endl;	
	kol_char = 0;																//Делим строку на нескольно (40 элементов в каждой)
	int i_begin = 0, i_end = 0;													//введем доп.переменные, начало и конец записываемой строки
	
	for (i = 0; i < str.size(); i++)						
	{	
		if (str[i] != ' ') kol_char++;											//Сравниваем символ с пробелом, если !=, то прибавляем к счетчику кол-ва элнментов
		else 
		{			
			if (kol_char < 40)													//Если символ - пробел, то кол-во==40
			{	
				kol_char++;														//Если кол-во<40, прибавляем 1 и устанавливаем указатель на последний символ
				i_end = i;             
			}
			else																//Если кол-во больше, записываем строку от i_begin до i_end во временную стороку strS
			{                             
				string strS;
				while (i_begin <= i_end)
				{
					strS += str[i_begin];
					i_begin++;
				}
				vect_str.push_back(strS);										//кладем strS в конец вектора
				i = i_end;														//возврящаем указатель к i_end
				kol_char = 0;			
			}
		}
		if (i == (str.size() - 1))												//Повторяем запись для оствашихся символов
		{
			string strS;
			while (i_begin <= i_end)
			{
				strS += str[i_begin];
				i_begin++;
			}
			vect_str.push_back(strS);
			i = i_end;
			kol_char = 0;				
		
		}
	}
	for (int x = 0; x < vect_str.size(); x++) cout << vect_str[x] << endl;
	fin.close();		
	_getch();
}